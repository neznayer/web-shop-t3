// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? // @db.String
    access_token      String? // @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("user")
    accounts      Account[]
    sessions      Session[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String   @id @default(cuid())
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating    Int?
    comment   String?
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          String    @id @default(cuid())
    name        String
    description String
    image       String
    comments    Comment[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    price       Float
}
